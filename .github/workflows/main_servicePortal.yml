name: Build and deploy Node.js app to Azure Web App - Service_Portal

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v2

      - name: Set up Node.js version
        uses: actions/setup-node@v1
        with:
          node-version: '16.x'

      - name: npm install, build, and test
        run: |
          npm install --legacy-peer-deps
          npm run build --if-present
          npm run test --if-present
      - name: Zip artifact for deployment
        run: |
          Compress-Archive -Path .\* -DestinationPath .\release.zip
      
      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v2
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v2
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip
            
      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v2
        id: deploy-to-webapp
        with:
          app-name: 'demoserviceportal'
          slot-name: 'Production'
          package: .
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_B7B08A9ECE104A01A18E0140A914620A }}

      - name: Check deployment status
        id: check-deployment
        run: |
          if curl -I https://demoserviceportal.azurewebsites.net/ | grep "200 OK"; then
            echo "Deployment successful"
          else
            echo "Deployment failed"
            exit 1
          fi

      - name: Get latest successful deployment
        if: failure()
        id: get-latest-successful
        run: |
          DEPLOYMENTS=$(az webapp deployment list --resource-group service_portal --name demoserviceportal --query "[?status=='success'].{id:id,createdTime:createdTime}" --output tsv | sort -k2 -r)
          LATEST_SUCCESSFUL_DEPLOYMENT_ID=$(echo "$DEPLOYMENTS" | head -n 1 | awk '{print $1}')
          echo "LATEST_SUCCESSFUL_DEPLOYMENT_ID=$LATEST_SUCCESSFUL_DEPLOYMENT_ID" >> $GITHUB_ENV

      - name: Rollback to latest successful deployment
        if: failure()
        run: |
          echo "Rolling back to the latest successful deployment..."
          az webapp deployment source config-zip --resource-group service_portal --name demoserviceportal --src-path ${{ env.LATEST_SUCCESSFUL_DEPLOYMENT_ID }}

      
